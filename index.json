[{"content":"I recently spent about 2hrs to learn rust-lang by following this guide - The Rust Programming Language.\nI wrote down some notes and thoughts about the experiences.\nThis is the first part.\nInstall Rust on macOS X  $ curl \u0026ndash;proto \u0026lsquo;=https\u0026rsquo; \u0026ndash;tlsv1.2 https://sh.rustup.rs -sSf | sh\n The installation process was quite nice. Everything was quite smooth and fast ‚ö°Ô∏è. Not quite sure if it was because I chose 1) which is the default installation.\nIn addition, the installation comes with local documentation which is really nice üëç.\n$ rustup doc Hello world!  Rust is an ahead-of-time compiled language, meaning you can compile a program and give the executable to someone else, and they can run it even without having Rust installed.\n The first compilation took a bit of time, the following compilations were faster, even with the executable deleted from disk. The compilation must be incremental with some caching.\nShipped with cargo The installation comes with cargo.\n Cargo is Rust‚Äôs build system and package manager.\n $ cargo new hello_cargo $ cd hello_cargo  You‚Äôll see that Cargo has generated two files and one directory for us: a Cargo.toml file and a src directory with a main.rs file inside.\n  It has also initialized a new Git repository along with a .gitignore file. Git files won‚Äôt be generated if you run cargo new within an existing Git repository; you can override this behavior by using cargo new \u0026ndash;vcs=git.\n As you can see the hello_cargo doesn\u0026rsquo;t have the git files because the folder is in side the repo of this notes.\nThe hello_cargo_vcs has the git files generated.\n$ cargo new hello_cargo_vcs --vcs=git note: I had to delete the ./git files otherwise git returns an error when adding files.\n$ git add . error: 'ch1/hello_cargo_vcs/' does not have a commit checked out fatal: adding files failed $ cargo build  Running cargo build for the first time also causes Cargo to create a new file at the top level: Cargo.lock. This file keeps track of the exact versions of dependencies in your project.\n build + run\n$ cargo run  Cargo figured out that the files hadn‚Äôt changed, so it just ran the binary. If you had modified your source code, Cargo would have rebuilt the project before running it,\n Compile but doesn\u0026rsquo;t produce executable which makes this process faster.\n$ cargo check  cargo check is much faster than cargo build, because it skips the step of producing an executable. If you‚Äôre continually checking your work while writing the code, using cargo check will speed up the process! As such, many Rustaceans run cargo check periodically as they write their program to make sure it compiles. Then they run cargo build when they‚Äôre ready to use the executable.\n build: produces executable. check: doesn\u0026rsquo;t produce executable.\nKey takeaways  Let‚Äôs recap what we‚Äôve learned so far about Cargo:\n   We can build a project using cargo build. We can build and run a project in one step using cargo run. We can build a project without producing a binary to check for errors using cargo check. Instead of saving the result of the build in the same directory as our code, Cargo stores it in the target/debug directory.  An additional advantage of using Cargo is that the commands are the same no matter which operating system you‚Äôre working on.\n Release cargo build --release to compile it with optimizations.\n This command will create an executable in target/release instead of target/debug. The optimizations make your Rust code run faster, but turning them on lengthens the time it takes for your program to compile. This is why there are two different profiles: one for development, when you want to rebuild quickly and often, and another for building the final program you‚Äôll give to a user that won‚Äôt be rebuilt repeatedly and that will run as fast as possible. If you‚Äôre benchmarking your code‚Äôs running time, be sure to run cargo build \u0026ndash;release and benchmark with the executable in target/release.\n ","permalink":"https://terrydai.com/posts/1-getting-started/","summary":"I recently spent about 2hrs to learn rust-lang by following this guide - The Rust Programming Language.\nI wrote down some notes and thoughts about the experiences.\nThis is the first part.\nInstall Rust on macOS X  $ curl \u0026ndash;proto \u0026lsquo;=https\u0026rsquo; \u0026ndash;tlsv1.2 https://sh.rustup.rs -sSf | sh\n The installation process was quite nice. Everything was quite smooth and fast ‚ö°Ô∏è. Not quite sure if it was because I chose 1) which is the default installation.","title":"Learning Notes - Getting Started"}]